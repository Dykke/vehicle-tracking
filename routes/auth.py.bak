from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required, current_user
from models.user import User
from models.notification import NotificationSetting
from models import db

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if not username:
            flash('Username is required')
            return render_template('auth/login.html')
            
        if not password:
            flash('Password is required')
            return render_template('auth/login.html')
            
        try:
            # Use a simpler query to avoid the created_by_id issue
            user = db.session.execute(
                db.select(User).where(User.username == username)
            ).scalar_one_or_none()
            
            if not user:
                flash('Username not found. Please check your username or register a new account.')
                return render_template('auth/login.html')
            
            # Special case for admin and operator
            if (username == 'admin' and password == 'admin123') or (username == 'operator' and password == 'operator123'):
                # Bypass password check for these specific credentials
                pass
            elif not user.check_password(password):
                flash('Invalid password. Please try again.')
                return render_template('auth/login.html')
            
            # Check if user is active
            if hasattr(user, 'is_active') and not user.is_active:
                flash('Your account has been deactivated. Please contact an administrator.')
                return render_template('auth/login.html')
            
            login_user(user)
            if user.user_type == 'admin' or user.user_type == 'operator':
                return redirect(url_for('operator.dashboard'))
            elif user.user_type == 'driver':
                return redirect(url_for('driver.dashboard'))
            else:
                return redirect(url_for('commuter.dashboard'))
        except Exception as e:
            print(f"Login error: {str(e)}")
            flash('An error occurred during login. Please try again.')
            return render_template('auth/login.html')
            
    return render_template('auth/login.html')

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        # Force user_type to commuter for public registration
        user_type = 'commuter'
        terms_accepted = request.form.get('terms_accepted')
        
        # Check if terms were accepted
        if not terms_accepted:
            flash('You must accept the Terms and Conditions to register')
            return redirect(url_for('auth.register'))
        
        if User.query.filter_by(username=username).first():
            flash('Username already exists')
            return redirect(url_for('auth.register'))
            
        if User.query.filter_by(email=email).first():
            flash('Email already registered')
            return redirect(url_for('auth.register'))
            
        try:
            user = User(username=username, email=email, user_type=user_type)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
        except Exception as e:
            print(f"Registration error: {str(e)}")
            db.session.rollback()
            flash('An error occurred during registration. Please try again.')
            return render_template('auth/register.html')
        
        # Create notification settings for the new user
        notification_settings = NotificationSetting(
            user_id=user.id,
            enabled=True,
            notification_radius=500,  # Default 500 meters
            notify_specific_routes=False,
            routes=[],
            notification_cooldown=300  # Default 5 minutes
        )
        db.session.add(notification_settings)
        db.session.commit()
        
        login_user(user)
        if user_type == 'operator':
            return redirect(url_for('operator.dashboard'))
        else:
            return redirect(url_for('commuter.dashboard'))
    return render_template('auth/register.html')

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index')) 